#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
#include "DHT.h"
#include <SoftwareSerial.h>

#define DHTPIN 2         // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11    // DHT 11

#define LED_PIN  11 // Red LED Pin
#define LED_PIN2 10 // Green LED Pin

DHT dht(DHTPIN, DHTTYPE);
MAX30105 particleSensor;

const byte RATE_SIZE = 4; // Increase this for more averaging. 4 is good.
byte rates[RATE_SIZE];    // Array of heart rates
byte rateSpot = 0;
long lastBeat = 0;        // Time at which the last beat occurred
float beatsPerMinute;
int beatAvg;

SoftwareSerial bluetooth(3, 4); // RX, TX

void setup() {
  Serial.begin(115200);
  bluetooth.begin(9600); // Bluetooth serial communication
  
  Serial.println("Initializing...");

  pinMode(LED_PIN, OUTPUT);  // Set the LED pin as output
  pinMode(LED_PIN2, OUTPUT); // Set the LED2 pin as output

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) { // Use default I2C port, 400kHz speed
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); // Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); // Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0);  // Turn off Green LED

  dht.begin();
}

void loop() {

  // Heart Rate Sensor Reading
  long irValue = particleSensor.getIR();

  if (checkForBeat(irValue)) {
    // We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20) {
      rates[rateSpot++] = (byte)beatsPerMinute; // Store this reading in the array
      rateSpot %= RATE_SIZE; // Wrap variable

      // Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
    }
  }

  // Temperature and Humidity Sensor Reading
  static unsigned long previousMillis = 0;
  const unsigned long interval = 2000; // Delay interval in milliseconds

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    float t = dht.readTemperature();

    if (isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }

    // Check for stress condition
    boolean isStress = (t < 33 && beatsPerMinute > 100);

    // Send data over Bluetooth with dynamic stress condition
    bluetooth.print("IR=");
    bluetooth.print(irValue);
    bluetooth.print(", BPM=");
    bluetooth.print(beatsPerMinute);
    bluetooth.print(", Avg BPM=");
    bluetooth.print(beatAvg);
    bluetooth.print("%  Temperature: ");
    bluetooth.print(t);
    bluetooth.print("°C ");
    if (isStress) {
      bluetooth.println(", STRESS");
    } else {
      bluetooth.println(", NO STRESS");
    }

    // Print readings
    Serial.print("IR=");
    Serial.print(irValue);
    Serial.print(", BPM=");
    Serial.print(beatsPerMinute);
    Serial.print(", Avg BPM=");
    Serial.print(beatAvg);
    Serial.print("%  Temperature: ");
    Serial.print(t);
    Serial.print("°C ");
    if (isStress) {
      Serial.println(", STRESS");
    } else {
      Serial.println(", NO STRESS");
    }

    // Control LED based on stress condition
    if (isStress) {
      digitalWrite(LED_PIN, HIGH); // Turn on Red LED
      delay(500); // Keep LED on for few seconds
      digitalWrite(LED_PIN, LOW); // Turn off LED
    } else {
      digitalWrite(LED_PIN2, HIGH); // Turn on Green LED
      delay(500); // Keep LED on for few seconds
      digitalWrite(LED_PIN2, LOW); // Turn off LED
    }

    if (irValue < 50000)
      Serial.print(" Place finger on sensor!");

    Serial.println();
  }
}
